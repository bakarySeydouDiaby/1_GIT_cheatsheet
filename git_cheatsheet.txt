I) Partie git
=============

Initialisation du repo git
=========================
git init
    This will create a .git repository in your project.

configuration
=============
    git config --global user.name "Your Name"
    git config --global user.email "yourEmail@mail.com


show config infos
================
    git config --list
    git config user.name

change username :
===============
    git config --global user.name "Alvin J. Alexander"

    or edit : ~/.gitconfig and read or modify


change your Git email address :
============================
    git config --global user.email [your email address here]

add file to what is called a “staging area” or index.
===================================================================
    git status => what files have been changed that need to be added to the staging area
    git add filename    git add .   git add *.html

create a file called .gitignore
================================
    touch .gitignore
     You can open that file with a text editor and write 
     the name of files or folders you want to be ignored 
     from your repository. 
     Ignored files won’t show up when you run git status 
     to prevent you from committing files you’ve previously 
     said you don’t want to commit or even know about their changes.

Removes specified file from the staging area.
===========================================
    git reset filename.extension

remove the file from the staging area and sets it to be untracked.
==================================================================
    git rm --cached filename.extension

    example : git rm --cached test_git 

    ==> test_git n'apparait plus avec git status

Takes the files from your staging area and commits them to your local repository.
====================================================================
    git commit -m "Description of the commit"

II) Git branch
===============
Creates what is called a branch
-------------------------------
    git branch branchName

list branchs
-------------
    git branch

checkout the branch you created and work within that branch.  
--------------------------------------------------------------  
    git checkout branchName
    ==> Now, all the codes from master branch 
        are present in the branchName branch

make a merge from branchName to master branch
----------------------------------------------
    git merge branchName
        While inside Master, this command take the commits 
        from the branch you were working in and merge 
        them together with the main repository.
    Example :
    --------
    changer du master a l'autre branch : git checkout branch1
    modifier le fichier ou ajouter d'autres fichiers 
    ajouter en stage et commiter : git add et git commit
    revenir en branch master : git checkout master
    Enfin faire un git merge 
    Verifier  : git status ou git log

III) Partie github : git remote
==============================

git remote add origin https://github.com/userName/project.git
    This adds the location of your remote repository.
    !!! first create the repo on github webapp
git remote add origin https://github.com/userName/project2.git
    add a second github remote repository

git remote
    List of your remote repositories that have 
    been associated with your project.

git push -u origin master
    first push your local repository to your remote repository.

git push
    push your code to GitHub after your initial push.

git clone https://github.com/userName/any_project.git
    If the project is not on the computer you’re working 
    with this will allow you to clone (or download) the entire project 
    into the directory you are working.

git pull
    If you are working on the same codebase with other people, 
    this command will allow you to pull the latest version 
    from the remote repository and update your local version
    so you can work with the latest updates as their changes
    enter the codebase. 

REMARQUE :
Nous avons 2 fichier texte, mais le test_git n'est pas concerné durant
toute la manip depuis qu'on l'a ajouté dans .gitignore

IV) uploading to master branch

fisrt push
----------
    git checkout master
    git remote add origin https://github.com/bakarySeydouDiaby/1_GIT_cheatsheet.git
    git push -u origin main
    git push -u origin master

another push after modifying or creating deleting and committing
----------------------------------------------------------------
    Ajout quelsues lignes puis faire 
        git status
        git add .
        git commit -m "ajout manip puhing to master"
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> branch1
        git push

V) pushing to  branch called "branch1"
======================================

creer branch1 dans github : 
    manuelle
    
se positionner en locale sur cette branch1
    git checkout branch1 : 
     Now, all the codes from master branch are present in the dev branch
ajout quelques lignes dans 1_GIT_cheatsheet 
    (cette section même)

        git status
        git add .
        git commit -m "ajout partie pushing to branch1"
        git push origin branch1


QUELSQUES ASTUCES
=================
revenir à un état anterieure après un git pull qui affecte les changements locaux
    git reset --hard branName@{"10 minutes ago"}


    autre methode :
    git reflog ==> les ids des commits 
    git reset --hard id_log_number ==> revenir à cette etat

<<<<<<< Updated upstream

=======
script bash pour commiter avec la commande : nom_script.sh "message"
    voir automate_push.sh
>>>>>>> Stashed changes
